install.packages("devtools")
library(devtools)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("shiny")
install_github("StatsWithR/statsr")
```{r setup, include=FALSE}
plot(pressure)
summary(cars)
plot(pressure)
library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
arbuthnot
View(arbuthnot)
View(arbuthnot)
View(arbuthnot)
dim(arbuthnot)
names(arbuthnot)
names(arbuthnot)
arbuthnot$boys
# type your code for the Question 2 here, and Knit
arbuthnot$girls
'''
Notice that the way R has printed these data is different. When we looked at the
complete data frame, we saw 82 rows, one on each line of the display. These data
are no longer structured in a table with other variables, so they are displayed
one right after another. Objects that print out in this way are called vectors;
they represent a set of numbers. R has added numbers in [brackets] along the left
side of the printout to indicate locations within the vector. For example, in the arbuthnot$boys vector, 5218  follows [1], indicating that 5218 is the first entry in the vector. And if [43] starts a line, then that would mean the first number on that line would represent the 43rd entry in the vector.
R has some powerful functions for making graphics. We can create a simple plot
of the number of girls baptized per year with the command
```{r plot-girls-vs-year}
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
# type your code for the Question 2 here, and Knit
arbuthnot$girls
arbuthnot$boys
exit()
dsafs
swirl()
swirl()
library("siwrl")
library(swirl)
swirl()
quit
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
print ("abc")
matrix_1_invesre <- makeCacheMatrix()
getwd
getwe()
getwd()
setwd(E:/Data Science/JHU/Assignments/JHU_data_sience/ProgrammingAssignment2)
setwd("E:/Data Science/JHU/Assignments/JHU_data_sience/ProgrammingAssignment2")
matrix_1_inverse$set(matrix_1)
track(test_code)
trace(test_code)
trace("test_code.R")
tracacheSolve(matrix_1_inverse)
cacheSolve(matrix_1_inverse)
print ("The invsersed matrix is:")
print a
print (a)
a <- 1
print (abc)
abc
matrix_1 <- matrix(c(0.1,0,0,0,0.1,0,0,0,0.1), 3, 3)
print abc
cat abc
cat (abc)
cat(abc)
printf(abc)
s
?print
sprintf(abc)
sprintf(jack)
matrix_1 <- matrix(c(0.1,0,0,0,0.1,0,0,0,0.1), 3, 3)
